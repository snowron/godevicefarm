// Code generated by MockGen. DO NOT EDIT.
// Source: services/cli_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	devicefarm "github.com/aws/aws-sdk-go-v2/service/devicefarm"
	gomock "github.com/golang/mock/gomock"
)

// MockDeviceFarm is a mock of DeviceFarm interface.
type MockDeviceFarm struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceFarmMockRecorder
}

// MockDeviceFarmMockRecorder is the mock recorder for MockDeviceFarm.
type MockDeviceFarmMockRecorder struct {
	mock *MockDeviceFarm
}

// NewMockDeviceFarm creates a new mock instance.
func NewMockDeviceFarm(ctrl *gomock.Controller) *MockDeviceFarm {
	mock := &MockDeviceFarm{ctrl: ctrl}
	mock.recorder = &MockDeviceFarmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceFarm) EXPECT() *MockDeviceFarmMockRecorder {
	return m.recorder
}

// FindDevicePoolArnWithName mocks base method.
func (m *MockDeviceFarm) FindDevicePoolArnWithName(projectArn, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDevicePoolArnWithName", projectArn, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDevicePoolArnWithName indicates an expected call of FindDevicePoolArnWithName.
func (mr *MockDeviceFarmMockRecorder) FindDevicePoolArnWithName(projectArn, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDevicePoolArnWithName", reflect.TypeOf((*MockDeviceFarm)(nil).FindDevicePoolArnWithName), projectArn, name)
}

// FindProjectArnWithName mocks base method.
func (m *MockDeviceFarm) FindProjectArnWithName(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProjectArnWithName", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProjectArnWithName indicates an expected call of FindProjectArnWithName.
func (mr *MockDeviceFarmMockRecorder) FindProjectArnWithName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProjectArnWithName", reflect.TypeOf((*MockDeviceFarm)(nil).FindProjectArnWithName), name)
}

// FindUpload mocks base method.
func (m *MockDeviceFarm) FindUpload(projectArn, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUpload", projectArn, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUpload indicates an expected call of FindUpload.
func (mr *MockDeviceFarmMockRecorder) FindUpload(projectArn, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUpload", reflect.TypeOf((*MockDeviceFarm)(nil).FindUpload), projectArn, fileName)
}

// GetTestSpecType mocks base method.
func (m *MockDeviceFarm) GetTestSpecType(fileArn string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestSpecType", fileArn)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestSpecType indicates an expected call of GetTestSpecType.
func (mr *MockDeviceFarmMockRecorder) GetTestSpecType(fileArn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestSpecType", reflect.TypeOf((*MockDeviceFarm)(nil).GetTestSpecType), fileArn)
}

// StartRun mocks base method.
func (m *MockDeviceFarm) StartRun(args devicefarm.ScheduleRunInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRun", args)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartRun indicates an expected call of StartRun.
func (mr *MockDeviceFarmMockRecorder) StartRun(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRun", reflect.TypeOf((*MockDeviceFarm)(nil).StartRun), args)
}

// UploadFile mocks base method.
func (m *MockDeviceFarm) UploadFile(projectArn, fileType, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", projectArn, fileType, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockDeviceFarmMockRecorder) UploadFile(projectArn, fileType, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockDeviceFarm)(nil).UploadFile), projectArn, fileType, path)
}
